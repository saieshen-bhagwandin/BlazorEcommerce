@page "/login"
@inject IUserService UserService
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService ToastService


<h3>Login</h3><br />

<EditForm Model="answer" OnSubmit="HandleLogin">
    <div class="form-group">
        <label for="Email">Email</label><br />
        <InputText id="Email" @bind-Value="answer.Email" type = "email" required class="form-control"/>
    </div><br />
    <div class="form-group">
        <label for="password">Password</label><br />
        <InputText id="password" @bind-Value="answer.Password" type="password" required class="form-control" />
    </div><br />
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private UserLoginRequest answer = new UserLoginRequest();

    private async void HandleLogin()
    {
        var user = await UserService.LoginAsync(answer);


        if (user.Email == "User not found") {
            ToastService.ShowError(user.Email, "Login failed");


        } else if (user.Email == "Password is incorrect") { 


            ToastService.ShowError(user.Email, "Login failed");


        }else if (user.Email == "User not verified") { 


            ToastService.ShowError(user.Email, "Login failed");


        }else{

            answer.Token = user.LoginToken;
            answer.Password = "*********";
            answer.Name = user.Name;
            answer.Surname = user.Surname;
            answer.StreetAddress = user.StreetAddress;
            answer.Suburb = user.Suburb;

        await LocalStorage.SetItemAsync("userinfo", answer);
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");

       ToastService.ShowSuccess("Welcome " + answer.Name, "Successful Login");

    }

    }
}
