@page "/orderhistory"
@inject ISyncLocalStorageService Localstorage
@inject IOrderService orderService
@inject ISyncLocalStorageService Localstorage
@inject IProductService productService
@inject ICategoryService categoryService


<h3>Orders</h3><br />

@if (orderService.Orders == null || orderService.Orders.Count == 0)
{
    
    <span> You have no orders...</span>

}else{

<ul class="list-unstyled" >
      <table>

  <tr>
 <th>Order Number</th>
<th>Product</th>
<th>Date</th>
<th>Action</th>
 </tr>

   @foreach (var order in orderService.ROrders)
{
      <tr>
     
           <td>@order.OrderNumber</td>
           <td>@productname(order.ProductIds,order.Quantity)</td>
           <td>@order.Date</td>
           <td><h5><a href="/order/@order.Id">View</a></h5></td>
       </tr>

        
 }

    </table>

</ul>

}

@code {

    public List<Orders> Orders { get; set; } = new List<Orders>();
    string productitles = "";
    private static List<Product> Products = new List<Product>{ };

    protected override void OnInitialized()
    {
        orderService.OrdersChanged += StateHasChanged;
        productService.ProductsChanged += StateHasChanged;
    }


    public void Dispose() { 

        orderService.OrdersChanged -= StateHasChanged;
        productService.ProductsChanged -= StateHasChanged;

    }


    protected override async Task OnInitializedAsync()
    {
        var user = Localstorage.GetItem<UserRegisterRequest>("userinfo");

        if(user!=null)
            await orderService.GetOrder(user.Email);

    }


    public string productname(string id,string quantity){

        string[] words = id.Split(',');
        string titles = "";
         string[] q = quantity.Split(',');

        for (var i = 1; i < words.Length; i++)
        {
            int theid = Int32.Parse(words[i]);

            foreach (var product in productService.Productsfororders)
            {

                if (i == (words.Length - 1))
                {
                    if (theid == product.Id)
                    {
                        titles = titles + product.Title + " (x" + q[i] + ") " ;
                    }
                }
                else
                {
                    if (theid == product.Id)
                    {

                        titles = titles + product.Title + " (x" + q[i] + ") ,";

                    }

                }


            }


        }

        return titles;


    }


    public string refactor(string id,string quantity){

        string[] words = id.Split(',');
        string titles = "";

        string[] q = quantity.Split(',');

        for (var i = 1; i < words.Length; i++)
        {
            Product product = new Product();
            int theid = Int32.Parse(words[i]);


            titles = titles + words[i] + "(" + q[i] + ")    ,                           ";

        }

    

        return titles;

    
    }



}
