@page "/product/{id:int}"
@inject IProductService ProductService 




@if (product == null)
{
    <span>@message</span>

}else{



    <div class="media">
    <div class="media-img-big-wrapper mr-2">
        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
    </div> 
    <div class="media-body">
        <h2 class="mb-0">@product.Title</h2> <br>
        <p>@product.Description</p>
        @if (product.Variants != null && product.Variants.Count > 0)
        {
            <div class="form-group">
                <select class="form-control" @bind="currentEditionId">
                    @foreach (var variant in product.Variants)
                    {
                        <option value="@variant.Edition.Id" >@variant.Edition.Name</option>
                    }
                </select>
            </div>
        }
       <br>


   @if (GetSelectedVariant() != null)
        {
            @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
            {
                <h6 class="text-muted original-price">$@GetSelectedVariant().OriginalPrice</h6>
            }
            <h4 class="price">
                $@GetSelectedVariant().Price
            </h4> <br>
        }
       
             <EditForm Model="cartItem">
               <div class="form-group">
                <InputNumber id="quantity" @bind-Value="cartItem.Quantity" class="form-control" style="width: 70px;" />
                </div>
              </EditForm> <br>
               <AuthorizeView>
                 <Authorized>
              <button class="btn btn-primary" ><i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart</button>
            </Authorized>
        </AuthorizeView>
    </div>

</div>



}



@code {
    private Product product = new Product();
    private string message = string.Empty;

    private int currentEditionId = 1;

    private CartItem cartItem = new CartItem { Quantity = 1 };

    [Parameter]
    public int Id {get;set;}

    protected override async Task OnParametersSetAsync() {

        var result = await ProductService.GetProductByIdAsync(Id);

        if(result.Data!=null)
        product = result.Data;

        if (product.Variants.Count > 0) {

            currentEditionId = product.Variants[0].EditionId;

        }

    }


        private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.EditionId == currentEditionId);
        return variant;
    }







}
